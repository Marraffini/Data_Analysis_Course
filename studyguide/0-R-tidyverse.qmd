---
title: "Tidy data"
---

This covers some introduces tidyverse and some functions we will be using in this course. This is not meant to be an exhaustive list and students are encourage to read R4 data science or other free tutorials online.

# Introduction to the tidyverse

We will be largely using the `tidyverse` suite of packages for data organisation, summarising, and plotting; see <https://www.tidyverse.org/>.

Let's load that package now:

```{r}
#| message: false
library(tidyverse)
```

Recommended reading to accompany this workshop is pages 1-11 of R for Data Science <https://r4ds.hadley.nz/>

# Tidy data

There are three interrelated rules that make a dataset tidy:

-   Each variable is a column; each column is a variable.
-   Each observation is a row; each row is an observation.
-   Each value is a cell; each cell is a single value.

![Tidy data](images/tidy_data.png){#fig-tidy}

Why ensure that your data is tidy? There are two main advantages:

-   There’s a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it’s easier to learn the tools that work with it because they have an underlying uniformity.

-   There’s a specific advantage to placing variables in columns because it allows R’s vectorized nature to shine. Most built-in R functions work with vectors of values. 

dplyr, ggplot2, and all the other packages in the tidyverse are designed to work with tidy data. 

# Summarize data

Apply summary functions to columns to create a new table of summary statistics. Summary functions take vectors as input and return one value back.

-   `summarize(.data, .. )` : Compute table of summaries

```{r}
mtcars |> summarize(avg = mean(mpg))
```

-   `count(.data, ..., wt = NULL, sort = FLASE, name = NULL)`: Count number of rows in each group defined by the variables in .... Also `tally()`, `add_count()`, and `add_tally()`.

```{r}
mtcars |> count(cyl)
```

# Group Cases

-   Use `group_by(.data, ..., .add = FALSE, .drop = TRUE)` to created a “grouped” copy of a table grouped by columns in .... dplyr functions will manipulate each “group” separately and combine the results.
```{r}
mtcars |>
  group_by(cyl) |>
  summarize(avg = mean(mpg))
```

# Extract cases

-   `filter(.data, ..., .preserve = FALSE)`: Extract rows that meet logical criteria.

```{r}
mtcars |> filter(mpg > 20)
```

Logical and boolean operations to use with filter()
-   `==`, `!=`
-   `<`, `>`
-   `<=`, `>=`
-   `is.na()`, `!is.na()`
-   `%in%`
-   `|`
See `?base::Logic` and `?Comparison` for help.

-   `distinct(.data, ..., .keep_all = FALSE)`: Remove rows with duplicate values.

```{r}
mtcars |> distinct(gear)
```

-   `pull(.data, var = -1, name = NULL, ...)`: Extract column values as a vector, by name or index.

```{r}
mtcars |> pull(wt)

```

-   `select(.data, ...)`: Extract columns as a table.

```{r}
mtcars |> select(mpg, wt)
```

Use these helpers with select()
-   `contains(match)`
-   `num_range(prefix, range)`
-   `:`, e.g., `mpg:cyl`
-   `ends_with(match)`
-   `all_of(x)` or `any_of(x, ..., vars)`
-   `!`, e.g., `!gear`
-   `starts_with(match)`
-   `matches(match)`
-   `everything()`

-   `dplyr::case_when()`: multi-case if_else()

```{r}
starwars |>
  mutate(type = case_when(
    height > 200 | mass > 200 ~ "large",
    species == "Droid" ~ "robot",
    TRUE ~ "other"
  ))
```

# Alter data

```{r}
df <- tibble(x_1 = c(1, 2), x_2 = c(3, 4), y = c(4, 5))
```

-    `across(.cols, .fun, ..., .name = NULL)`: summarize or mutate multiple columns in the same way. 

```{r}
df |> summarize(across(everything(), mean))
```

-   `c_across(.cols)`: Compute across columns in row-wise data.

```{r}
df |> 
  rowwise() |>
  mutate(x_total = sum(c_across(1:2)))
```

-   `mutate(.data, ..., .keep = "all", .before = NULL, .after = NULL)`: Compute new column(s). Also add_column().

```{r}
mtcars |> mutate(gpm = 1 / mpg)
mtcars |> mutate(mtcars, gpm = 1 / mpg, .keep = "none")
```

-   `rename(.data, ...)`: Rename columns. Use rename_with() to rename with a function.

```{r}
mtcars |> rename(miles_per_gallon = mpg)
# also see colnames() and names()

```

# Summary functions

## To Use with summarize()
`summarize()` applies summary functions to columns to create a new table. Summary functions take vectors as input and return single values as output.

*Count*
-   `dplyr::n()`: number of values/rows
-   `dplyr::n_distinct()`: # of uniques
-   `sum(!is.na())`: # of non-NAs

*Position*
-   `mean()`: mean, also `mean(!is.na())`
-   `median()`: median

*Logical*
-   `mean()`: proportion of TRUEs
-   `sum()`: # of TRUEs

*Order*
-   `dplyr::first()`: first value
-   `dplyr::last()`: last value
-   `dplyr::nth()`: value in the nth location of vector

*Rank*
-   `quantile()`: nth quantile
-   `min()`: minimum value
-   `max()`: maximum value

*Spread*
-   `IQR()`: Inter-Quartile Range
-   `mad()`: median absolute deviation
-   `sd()`: standard deviation
-   `var()`: variance

