size = 3, seed = 1042) +  # this makes it reproducible
scale_x_continuous("Waffle Houses per million", limits = c(0, 55)) +
ylab("Divorce rate") +
theme_bw() +
theme(panel.grid = element_blank())
# residual plots using base R, can be done with ggplot
par(mfrow=c(2,2))
plot(fit_w)
par(mfrow=c(2,2))
plot(fit_w)
par(mfrow=c(2,2))
plot(fit_w)
5+8+4
5+8+4
7+8+5
View(WaffleDivorce)
5+8+7
data(InsectSprays)
str(InsectSprays)
head(InsectSprays)
aov(sqrt_count ~ spray, data=IS) |> TukeyHSD()
IS = InsectSprays
aov(sqrt_count ~ spray, data=IS) |> TukeyHSD()
colnames(IS)
aov(count ~ spray, data=IS) |> TukeyHSD()
#| echo: true
kruskal.test(IS$count~IS$spray)
aov(count ~ spray, data=IS)
aov(count ~ spray, data=IS) |> TukeyHSD()
kruskal.test(IS$count~IS$spray)
kruskal.test(IS$count~IS$spray)|> TukeyHSD()
oys <- read_csv("https://www.massey.ac.nz/~anhsmith/data/oystergrowth.csv")
str(oys)
oys <- oys |>
mutate(
Temperature = factor(
Temperature,
levels = c("Low","Med","High")
),
Salinity = factor(
Salinity,
levels = c("Low","High")
)
)
colnames(oys)
kruskal.test(oys$Growth~oys$Salinity)
aov(oys$Growth~oys$Salinity)
aov(Growth~Salinity, data = oys)
wilcox.test(oys$Growth~oys$Salinity)
knitr::opts_chunk$set(warning = FALSE,
echo = FALSE,
include=TRUE,
message=FALSE,
comment = NA,
warn=-1,
warn.conflicts = FALSE,
quietly=TRUE,
fig.align="center")
library(tidyverse)
theme_set(theme_minimal())
oys <- read_csv("https://www.massey.ac.nz/~anhsmith/data/oystergrowth.csv")
print(oys, row.names=FALSE)
oys <- oys |>
mutate(
Temperature = factor(
Temperature,
levels = c("Low","Med","High")
),
Salinity = factor(
Salinity,
levels = c("Low","High")
)
)
summary(aov(Growth~Salinity+Temperature, data=oys))
summary(aov(Growth~Salinity+Temperature, data=oys))
data(ToothGrowth)
head(ToothGrowth)
data(ToothGrowth)
head(ToothGrowth)
# Convert dose as a factor and recode the levels
# as "D0.5", "D1", "D2"
ToothGrowth$dose <- factor(ToothGrowth$dose,
levels = c(0.5, 1, 2),
labels = c("D0.5", "D1", "D2"))
View(ToothGrowth)
summary(aov(len~dose+supp, data=ToothGrowth))
ToothGrowth |> ggplot() +
aes(x = factor(supp), y = len) +
stat_summary(fun = mean, geom = "point", aes(group = 1)) +
stat_summary(fun = mean, geom = "line", aes(group = 1))+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
ggtitle("Main effect of Supplement")
ToothGrowth |> ggplot() +
aes(x = supp, y = len) +
stat_summary(fun = mean, geom = "point", aes(group = 1)) +
stat_summary(fun = mean, geom = "line", aes(group = 1))+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
ggtitle("Main effect of Supplement")
teeth <- aov(len~supp+dose, data=ToothGrowth)
TukeyHSD(teeth)
library(ggplot2)
p1= ggplot(data = ToothGrowth, aes(x = supp, y = len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
library(ggplot2)
p1= ToothGrowth |> ggplot( aes(x = supp, y = len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
colnames(ToothGrowth)
library(ggplot2)
p1= ToothGrowth |> ggplot( aes(x = supp, y = ToothGrowth$len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
library(ggplot2)
p1= ToothGrowth |> ggplot( aes(x = supp, y = len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
p1= ToothGrowth |> ggplot( aes(x = supp, y = len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
p2= ggplot(data = ToothGrowth, aes(x = dose, y = len, group=supp, colour=supp)) +stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
p2= ggplot(data = ToothGrowth, aes(x = dose, y = len, group=supp, colour=supp)) +stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
library(ggplot2)
p1= ggplot(data = ToothGrowth, aes(x = supp, y = len, group=dose, colour=dose)) +
stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
p2= ggplot(data = ToothGrowth, aes(x = dose, y = len, group=supp, colour=supp)) +stat_summary(fun=mean, geom="point")+
stat_summary(fun=mean, geom="line")+
geom_abline(intercept = mean(ToothGrowth$len), slope=0)+
theme_bw()+ggtitle("Dose*Supplement Interaction effect")
library(patchwork)
p1+p2
ToothGrowth |>
aov(formula = len ~ supp * dose) |>
summary()
modl <- ToothGrowth |>
aov(formula = len ~ supp * dose)
toothgrowth <- ToothGrowth |>
mutate(Fitted = fitted.values(modl), Residuals = residuals(modl))
p1 <- ggplot(toothgrowth, aes(sample=Residuals))+stat_qq()+stat_qq_line()+
labs(title = "Normal Probability Plot \nof the Residuals")
p2 <- ggplot(toothgrowth, aes(y=Residuals, x=Fitted))+geom_point() +
geom_hline(yintercept = 0) +
labs(title = "Residuals Vs \n Fitted Values")
p3 <- ggplot(toothgrowth) +
aes(Residuals) +
geom_histogram(bins=4) +
labs(title = "Histogram of the Residuals")
p4 <- ggplot(toothgrowth) +
aes(y=Residuals, x=1:length(Residuals)) +
geom_point()+geom_line() +
geom_hline(yintercept = 0) +
labs(title = "Residuals Vs Obs. Order")
library(patchwork)
p1+p2+p3+p4 & theme_minimal()
TukeyHSD(modl)$`supp:dose`
#| echo: FALSE
#| label: fig-meansd
#| fig-cap: 'SD vs mean for four fabrics'
fabric |>
group_by(fabric) |>
summarise(
mean = mean(burntime),
sd = sd(burntime)
) |>
ggplot() +
aes(x = mean, y = sd, group = factor(1)) +
geom_point(size = 3)
knitr::opts_chunk$set(warning = FALSE,
echo = FALSE,
include=TRUE,
message=FALSE,
comment = NA,
warn=-1,
warn.conflicts = FALSE,
quietly=TRUE,
fig.align="center")
library(tidyverse)
theme_set(theme_minimal())
fabric=read.table("../data/fabric.txt", header=TRUE, sep="\t")
fabric |>
ggplot(aes(x=factor(fabric), y=burntime))+
geom_point()+
stat_summary(fun.data = "mean_cl_boot", colour = "blue", linewidth = 2, size = 3)
fabric |>
ggplot(aes(x=factor(fabric), y=burntime))+
geom_point()+
stat_summary_bin(fun = "mean", geom = "bar", orientation = 'x')
summary(aov(burntime ~ fabric, data = fabric))
summary(aov(burntime ~ fabric, data = fabric))
curve(dt(x, df=10), from=-4, to=4)
curve(df(x, df1=3, df2=16), from=0, to=8)
ggplot(fabric) +
aes(x = fabric, y = burntime) +
geom_jitter(mapping=aes(col=fabric), height = 0, width=.2, alpha=.4) +
stat_summary(fun = "mean", geom = "point") +
stat_summary(fun.data = "mean_cl_normal",
geom = "errorbar", width = 0.1,
fun.args = list(conf.int = 0.95)) +
theme(legend.position = "none") + coord_flip()
plot(aov(burntime ~ fabric, data = fabric))
#| echo: FALSE
#| label: fig-meansd
#| fig-cap: 'SD vs mean for four fabrics'
fabric |>
group_by(fabric) |>
summarise(
mean = mean(burntime),
sd = sd(burntime)
) |>
ggplot() +
aes(x = mean, y = sd, group = factor(1)) +
geom_point(size = 3)
fabric |>
group_by(fabric) |>
summarise(
mean = mean(burntime),
sd = sd(burntime)
) |>
ggplot() +
aes(x = mean, y = sd, group = factor(1)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0,3))
fabric |>
group_by(fabric) |>
summarise(
mean = mean(burntime),
sd = sd(burntime)
) |>
ggplot() +
aes(x = mean, y = sd, group = factor(1)) +
geom_point(size = 3) +
scale_y_continuous(limits = c(0,4))
library(knitr)
opts_chunk$set(dev=c("png"))
opts_chunk$set(fig.width=7, fig.path="Figures/", fig.alt="to fix")
opts_chunk$set(comment="", fig.align="center", tidy=TRUE)
options(knitr.kable.NA = '')
library(tidyverse)
library(broom)
# add in any other packages used here
xfun::embed_file("LyuJrEtAl1996.csv")
setwd("~/Documents/Classes/228371")
setwd("~/Documents/Classes/161.250/161250_course/workshops")
install.packages("faraway")
20+12+3+2+3+3+3+3+3+3+5+2+2+2+2+2+2+5+3
10+20+10+20+30
library(knitr)
opts_chunk$set(dev=c("png"))
opts_chunk$set(fig.width=7, fig.path="Figures/", fig.alt="to fix")
opts_chunk$set(comment="", fig.align="center", tidy=TRUE)
options(knitr.kable.NA = '')
library(tidyverse)
library(broom)
# add in any other packages used here
Q2 =  read.csv("ReidEtAl1949.csv", stringsAsFactors = TRUE) |> glimpse()
setwd("~/Documents/Classes/161.250/161250_course/workshops")
library(tidyverse)
theme_set(theme_bw())
data(InsectSprays)
str(InsectSprays)
head(InsectSprays)
unique(InsectSprays$spray)
IS = InsectSprays
table(IS$spray)
IS |>
ggplot() +
aes(x = count, y = spray) +
geom_boxplot()
dvp <- IS |>
ggplot() +
aes(x = count, y = spray) +
geom_violin() + # display the violins
geom_jitter(width = 0, height = 0.1, alpha = .5) # add the points, with a little jitter so they do not overlap
dvp
dvp <- IS |>
ggplot() +
aes(x = count, y = spray) +
geom_violin() #+ # display the violins
# geom_jitter(width = 0, height = 0.1, alpha = .5) # add the points, with a little jitter so they do not overlap
dvp
dvp <- IS |>
ggplot() +
aes(x = count, y = spray) +
geom_violin() + # display the violins
geom_jitter(width = 0, height = 0.1, alpha = .5) # add the points, with a little jitter so they do not overlap
dvp
meanIS <- IS |> group_by(spray) |> summarise(count = mean(count))
dvp +
geom_point( # adds a line for the mean value
data = meanIS,
colour = "darkorange" ,
shape = "|",
size = 8
)
aov(count ~ spray, data = IS)
aov(count ~ spray, data=IS) |> summary()
plot(aov(count ~ spray, data=IS))
IS |> group_by(spray) |> summarise(sd = sd(count))
car::leveneTest(aov(count ~ spray, data=IS))
table(IS$count)
IS |>
mutate(
lcount  = log(count+1)
) |>
aov(formula = lcount ~ spray) |>
car::leveneTest()
IS |>
mutate(
lcount  = log(count+1)
) |>
ggplot() +
aes(x = lcount, y = spray) |>
geom_boxplot()
IS |>
mutate(
sqrt_count  = sqrt(count)
) |>
aov(formula = sqrt_count ~ spray) |>
car::leveneTest()
IS |>
mutate(
sqrt_count  = sqrt(count)
) |>
ggplot() +
aes(x = sqrt_count, y = spray) |>
geom_boxplot()
IS <- IS |> mutate( sqrt_count  = sqrt(count) )
aov(sqrt_count ~ spray, data=IS) |> summary()
aov(sqrt_count ~ spray, data=IS) |> plot()
aov(sqrt_count ~ spray, data=IS) |> plot()
aov(sqrt_count ~ spray, data=IS) |> TukeyHSD()
aov(sqrt_count ~ spray, data=IS) |>
TukeyHSD() |>
plot(las=1)
oys <- read_csv("https://www.massey.ac.nz/~anhsmith/data/oystergrowth.csv")
str(oys)
table(oys$Salinity, oys$Temperature)
factor(oys$Temperature) |> levels()
oys <- oys |>
mutate(
Temperature = factor(
Temperature,
levels = c("Low","Med","High")
),
Salinity = factor(
Salinity,
levels = c("Low","High")
)
)
ggplot(oys) +
aes(x = Growth, y = Temperature) +
geom_boxplot()
ggplot(oys) +
aes(x = Growth, y = Temperature) +
geom_violin() +
geom_jitter(width=0, height=.1, alpha = .4)
ggplot(oys) +
aes(x = Growth, y = Salinity) +
geom_boxplot()
library(tidyverse)
library(vcdExtra)
install.packages(vcdExtra)
install.packages("vcdExtra")
library(vcdExtra)
data(Toxaemia)
Toxaemia |>
ggplot() +
aes(x=smoke, y=Freq, fill=hyper) +
geom_bar(stat='identity')
View(Toxaemia)
names(diamonds)
data("diamonds")
View(diamonds)
tab.data <- xtabs( ~ cut+color, data = diamonds)
tab.data
# alternative coding
tab.data <- table(diamonds$cut, diamonds$color)
tab.data
plot(tab.data)
?diamonds
vcd::mosaic(tab.data, shade=TRUE, legend=TRUE)
assoc(tab.data, shade=TRUE)
strucplot(tab.data, core = struc_assoc)
sieve(tab.data)
library(gplots)
?sieve
sieve(tab.data, split_vertical = T)
sieve(tab.data, split_vertical = TRUE)
strucplot(tab.data, core = struc_assoc)
strucplot(tab.data, core = struc_assoc, split_vertical = TRUE)
?mosaic
vcd::mosaic(tab.data, shade=TRUE, legend=TRUE, split_vertical = TRUE)
tab.data <- xtabs(Freq ~ smoke + hyper + urea, data=Toxaemia)
plot(tab.data)
mosaic(tab.data, shade=TRUE, legend=TRUE)
assoc(tab.data, shade=TRUE)
strucplot(tab.data)
# EDA
tab.data <- xtabs( ~ cut+color, data = diamonds)
# alternative coding
tab.data <- table(diamonds$cut, diamonds$color)
# A test of association
#
chisq.test(tab.data)
vcd::mosaic(tab.data, shade=TRUE, legend=TRUE, split_vertical = TRUE)
mosaic(tab.data, shade=TRUE, legend=TRUE)
# EDA
tab.data <- xtabs( ~ cut+color, data = diamonds)
mosaic(tab.data, shade=TRUE, legend=TRUE)
class(tab.data)
summary(tab.data)
?xtabs
# EDA
tab.data <- xtabs( ~ cut+color, data = diamonds)
plot(tab.data)
mosaic(tab.data, shade=TRUE, legend=TRUE)
assoc(tab.data, shade=TRUE)
strucplot(tab.data, core = struc_assoc, )
sieve(tab.data)
library(gplots)
install.packages('gplots')
gplots::balloonplot(tab.data, main ="Balloon Plot", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
#| message: false
library(car)
data(Prestige)
?geom_bar
View(Prestige)
data("diamonds")
view(diamonds)
t <-Prestige |>
rownames_to_column(var = "profession")
View(t)
t <-Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)# |>
t <-Prestige |>
rownames_to_column(var = "profession")#|>
t2 <-Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)# |>
View(t2)
levels(t$profession)
unique(t$profession)
unique(t2$profession)
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot() #+
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot()
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot() +
aes(x = profession, y = prestige, colour = type) #+
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot() +
aes(x = profession, y = prestige, colour = type)
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot() +
aes(x = profession, y = prestige, colour = type) +
geom_point()
Prestige |>
rownames_to_column(var = "profession")|>
mutate(
profession = fct_reorder(profession, prestige)
)|>
ggplot() +
aes(x = profession, y = prestige, colour = type) +
geom_point() +
coord_flip()
575-377
