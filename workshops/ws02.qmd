---
title: "Chapter 2 Workshop"
---


# Dataset **`Prestige`**

As you work through this workshop, you can copy the code and paste it into a code chunk. Write notes and observations to your self as you go. 

We will be using a well-known dataset called `Prestige` from the `car`	R package. This dataset deals with prestige ratings of Canadian occupations. The `Prestige` dataset has 102 rows and 6 columns. Each row (or 'observation') is an occupation.

This data frame contains the following columns:

* `education` - Average education of occupational incumbents, years, in 1971.

* `income` - Average income of incumbents, dollars, in 1971.

* `women` - Percentage of incumbents who are women.

*  `prestige` - Pineo-Porter prestige score for occupation, from a social survey conducted in the mid-1960s.

* `census` - Canadian Census occupational code.

*  `type` - Type of occupation. A factor with levels: bc, Blue Collar; prof, Professional, Managerial, and Technical; wc, White Collar. (includes four missing values).

```{r, echo=FALSE}
options(warn=-1) 
```


```{r, echo=FALSE, message=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE, comment=NA, fig.show = "hide")
```

First we'll load the data. The dataset sits in the `car` package, so you need to load the `car` package first.

```{r}
#| message: false
library(car)
data(Prestige)
```


# Exercise 2.1 {-}

Draw a bar chart for `type`. These plots show the count or relative frequency of blue collar (`bc`), professional (`prof`), and white collar (`wc`) professions in the dataset. 

```{r}
library(tidyverse)

p <- Prestige |> 
  ggplot() +
  aes(type) + 
  geom_bar()

p
```

Or with `plotly` (which works for HTML, not for PDF)

```{r}
library(plotly)

ggplotly(p)
```

Or with old-style R plot

```{r}
# or
library(car)
barplot(table(Prestige$type))
```



# Exercise 2.2 {-}

Draw a histogram of `prestige`. 

Below demonstrates the flexibility of `ggplot` code. You can specify the `data` argument by piping it into `ggplot`, or by putting it as an argument to `ggplot` or a `geom_`. Likewise, the `mapping` or `aes` information, which determines which variables are used where, can be added as an extra line or specified inside the `ggplot` or `geom_` function.


```{r}
Prestige |> 
  ggplot() +
  aes(x = prestige) +
  geom_histogram()
```

Now, this histogram, where the number of bins has been chosen for us, looks a bit "spiky" to my eye. You can control the number of bins by adding an argument `bins = 10`. 

```{r}
Prestige |> 
  ggplot() +
  aes(x = prestige) +
  geom_histogram(bins=10)
```

`ggplot` is very flexible as to where you put the data and the `aes` information; all of these methods give the same result.

```{r}

Prestige |> 
  ggplot() +
  aes(x = prestige) +
  geom_histogram(bins=10)

ggplot(
  data = Prestige,
  mapping = aes(x = prestige)
  ) +
  geom_histogram(bins=10)

ggplot(Prestige) +
  aes(x = prestige) +
  geom_histogram(bins=10) 

ggplot() +
  geom_histogram(
    data = Prestige,
    mapping = aes(x = prestige),
    bins = 10
    )


# or
# library(plotly)
# p <- Prestige |> 
#   ggplot() +
#   aes(prestige) +
#   geom_histogram(bins=10)
# 
# ggplotly(p)

# or
# hist(Prestige$prestige)
```

Now let's display the prestige scores for each profession as a dot plot.

Note that I'm including the code-chunk option `#| fig-height: 12` at the beginning of my code chunk so that the plot is big enough to show all the professions without overlap. 

```{r}
#| fig-height: 12
#| output: true
#| fig-show: asis

Prestige |>
  ggplot() + 
  aes(x = rownames(Prestige), y = prestige) +
  geom_point() +
  coord_flip()

```

What a mess! 

We can tidy it up by ordering the professions on the plot according to `prestige`. First, we move the professions from rownames to a variable. Then, we `fct_reorder` the professions using the `prestige` scores. Then, the resulting data gets piped into `ggplot`.


```{r}
#| fig-height: 12
#| fig-width: 6
#| output: true
#| fig-show: asis

Prestige |> 
  rownames_to_column(var = "profession") |> 
  mutate(
    profession = fct_reorder(profession, prestige)
    ) |>
  ggplot() + 
  aes(x = profession, y = prestige, colour = type) +
  geom_point() +
  coord_flip()
```


# Exercise 2.3 {-}

a) Obtain some summary statistics for `prestige`. There are a few options for this.

```{r}
summary(Prestige)

library(psych)

describe(Prestige)

describeBy(education + income + women + prestige ~ type, 
           data = Prestige)
```

b) Make a summary dataset, average variable for each type of occupation.

```{r}

```


# Exercise 2.4 {-}

Make a boxplot of `prestige ~ type`:

```{r}
Prestige |> 
  ggplot() +
  aes(y=prestige, x=type) +
  geom_boxplot()

# or
# library(plotly)
# p <- Prestige |> ggplot() + 
#   aes(y=prestige, x=type) + geom_boxplot()
# ggplotly(p)

# or
# library(lattice)
# bwplot(prestige ~ type, data=Prestige)

# as violin plots
Prestige |> 
  ggplot() +
  aes(y=prestige, x=type) +
  geom_violin()

# Or put it all together
Prestige |> 
  ggplot() +
  aes(y=prestige, x=type) +
  geom_violin() + 
  geom_boxplot(col = 2, alpha = .2) +
  geom_jitter(alpha = .2, width = .2, height = 0, colour = 4)

```


# Exercise 2.5 {-}

Obtain the Empirical Cumulative Distribution Function (ECDF) graphs of `prestige ~ type`:

```{r}
Prestige |> 
  ggplot() + 
  aes(prestige, colour=type) +
  stat_ecdf()

Prestige |> 
  ggplot() + 
  aes(prestige) +
  stat_ecdf() + 
  facet_wrap(~type)

```


```{r}
Prestige |> 
  ggplot() + 
  aes(
    x = prestige, # these aes settings are used
    col = type    # by both geoms
    ) +
  geom_density(
    aes(fill = type), # the 'fill' aes goes here because 
    alpha = .2        # geom_rug doesn't use 'fill'
    ) +
  geom_rug()

```

With which plot – the ECDF or the density plot – is it easier to compare the distributions of prestige scores among these groups?

# Exercise 2.6 {-}

Obtain the \{0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95\} quantiles of `prestige`:

```{r, results="hide"}
pr <- c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99)

Prestige |> 
  summarise(
    probs = pr,
    quants = quantile(prestige, pr)
    )

# or simply
quantile(Prestige$prestige, pr)
```


# Exercise 2.7 {-}

Obtain the scatter plot (with and without marginal boxplots) **prestige vs. education **: How can you describe the relationship implied by the pattern?


```{r}
library(ggExtra)

p1 <- Prestige |> 
  ggplot() + 
  aes(x = education, y = prestige) +
  geom_point() + 
  geom_smooth(col = 2) + 
  geom_smooth(method = "lm", se = FALSE)

ggMarginal(p1, type="boxplot")
```


```{r}
library(car)

scatterplot(education ~ prestige, data = Prestige)
```

The later plot will show prediction interval ribbon while the first plot will show the confidence interval ribbon.

# Exercise 2.8 {-}

Obtain the bubble or balloon plot  **prestige vs. education vs. income** (income forming the bubble size):

```{r}
library(ggplot2)

Prestige |> 
  ggplot() + 
  aes(x = education, y = prestige, size = income) +
  geom_point()


# or

library(plotly)

p <- Prestige |>
  ggplot() + 
  aes(x = education, y = prestige, size = income) +
  geom_point()

ggplotly(p)
```
Make a different scatter plot using the same three variables. Keep `x = education, y = prestige` but use a different option to illustrate the influence of income.

```{r}

```


# Exercise 2.9 {-}

Obtain the contour plot  **prestige vs. education vs. income** :

```{r, eval = knitr::is_latex_output()}
#| results: hide

library(plotly)

plot_ly(type = 'contour', 
        x = Prestige$education, 
        y = Prestige$income, 
        z = Prestige$prestige)
```

To add axes labels and titles, try-

```{r, eval = knitr::is_latex_output()}
#| results: hide

plot_ly(
  Prestige,
  type = 'contour',
  x = Prestige$education,
  y = Prestige$income,
  z = Prestige$prestige
) |> layout(
  title = 'Contour Plot of prestige scores',
  xaxis = list(title = 'education'),
  yaxis = list(title = 'income')
)
```


# Exercise 2.10 {-}

Create `prestige ~ education | type` graphs.  That is, `prestige ~ education` grouped by `type` as colours and/or panels.


```{r}
Prestige |> 
  ggplot() + 
  aes(x = education, y = prestige, colour = type) +
  geom_point() + 
  facet_wrap(~ type)

# or
# library(plotly)
#
# p <- Prestige |> 
#   ggplot() + 
#   aes(x = education, y = prestige, color = type) +
#   geom_point() + 
#   facet_wrap(~ type)
# 
# ggplotly(p)
```


```{r}
p <- Prestige |> 
  ggplot() + 
  aes(x = education, y = prestige, color = type) +
  geom_point()

p

# OR
#
# library(plotly)
# ggplotly(p)
```

# Make it fancy

## Adjusting labels

```{r, eval = FALSE}
?labs()
```

## color pallets 

```{r}

```

## themes

```{r}

```

More graphing examples are [here](../exercises/Chap2more.R) (R code file).